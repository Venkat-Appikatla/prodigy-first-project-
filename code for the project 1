pip install numpy pandas scikit-learn matplotlib

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Sample data creation (replace this with your actual data)
data = {
    'SquareFootage': [1500, 1800, 2400, 3000, 3500, 4200, 4700, 5200, 5800, 6100],
    'Bedrooms': [3, 4, 3, 5, 4, 6, 5, 7, 6, 7],
    'Bathrooms': [2, 2, 3, 4, 3, 4, 5, 6, 5, 6],
    'Price': [300000, 350000, 400000, 500000, 450000, 600000, 650000, 700000, 750000, 800000]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Features and target variable
X = df[['SquareFootage', 'Bedrooms', 'Bathrooms']]
y = df['Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Print the model coefficients
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)

# Plotting the results
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')
plt.show()
